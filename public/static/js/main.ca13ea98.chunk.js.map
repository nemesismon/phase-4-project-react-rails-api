{"version":3,"sources":["Home.js","Login.js","EditForm.js","UserLists.js","ProjectLists.js","NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["Home","to","Login","setSessionUserData","sessionUserData","loginStatus","setLoginStatus","setSessionProjData","handleGetProjects","useState","username","setUsername","password","setPassword","passwordConfirmation","setPasswordConfirmation","companyName","setCompanyName","address","setAddress","tradeType","setTradeType","poc","setPoc","phone","setPhone","email","setEmail","loginCreate","setLoginCreate","loginErrors","setLoginErrors","createErrors","setCreateErrors","navigate","useNavigate","handleUserLogin","e","preventDefault","fetch","method","headers","body","JSON","stringify","then","r","ok","json","respData","errorData","handleUserCreate","password_confirmation","company_name","trade_type","point_of_contact","loginDisplay","showLoginError","error","className","onSubmit","type","name","placeholder","value","onChange","target","createDisplay","createError","toggleButton","onClick","EditForm","item","handleCompleteItem","setEditErrors","projectSelector","areaSelector","selectProject","selectArea","sessionProjData","editItem","setEditItem","updateTask","setUpdateTask","updateNotes","setUpdateNotes","updateCompleteBy","setUpdateCompleteBy","titleFound","punchItemToProjectTitle","length","undefined","find","proj","id","project_id","title","task","area","notes","complete_by","console","log","handleUpdateItem","UserLists","createPunchItem","setCreatePunchItem","itemTask","setItemTask","setItemArea","itemNotes","setItemNotes","itemCompBy","setItemCompBy","itemErrors","setItemErrors","editErrors","setSelectProject","setSelectArea","handleItemCreate","active","punch_items","push","x","splice","itemMessages","style","color","projMessages","map","project","areas","label","align","showEditErrors","showItemErrors","execProfile","ProjectLists","projectErrors","setProjectErrors","createProject","setCreateProject","projTitle","setProjTitle","projAddress","setProjAddress","projOwnerName","setProjOwnerName","projCompBy","setProjCompBy","handleProjCreate","owner_name","createProjectForm","showProjectErrors","users","user","Math","round","random","NavBar","textDecoration","App","useEffect","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca13ea98.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nfunction Home () {\n\n    return (\n        <div>\n            <h1>Home</h1>\n            <p>Project Management just got easier.</p>\n            <Link to={'/login'}>Login</Link>\n        </div>\n    )\n}\n\nexport default Home","import React, { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport './App.css';\n\nfunction Login({setSessionUserData, sessionUserData, loginStatus, setLoginStatus, setSessionProjData, handleGetProjects}) {\n\n    const[username, setUsername] = useState('')\n    const[password, setPassword] = useState('')\n    const[passwordConfirmation, setPasswordConfirmation] = useState('')\n    const[companyName, setCompanyName] = useState('')\n    const[address, setAddress] = useState('')\n    const[tradeType, setTradeType] = useState('')\n    const[poc, setPoc] = useState('')\n    const[phone, setPhone] = useState(0)\n    const[email, setEmail] = useState('')\n    const[loginCreate, setLoginCreate] = useState(true)\n    const[loginErrors, setLoginErrors] = useState()\n    const[createErrors, setCreateErrors] = useState()\n    const navigate = useNavigate()\n\n    const handleUserLogin = (e) => {\n        e.preventDefault();\n        fetch('/login', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                username: username,\n                password: password\n            }),\n        })\n        .then((r) => \n            {if (r.ok) {\n                return r.json().then((respData) => {\n                    setSessionUserData(respData)\n                    setSessionProjData(handleGetProjects())\n                    setLoginStatus(true)\n                    navigate('/profile')        \n                })\n            } else {\n                return r.json().then((errorData) => {\n                    setLoginErrors(errorData)\n                    setSessionUserData(null)\n                    setLoginStatus(false)\n                })\n            }})\n            setCreateErrors()\n            setUsername('')\n            setPassword('')        \n    } \n\n    const handleUserCreate = (e) => {\n        e.preventDefault();\n            \n        fetch('/users', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                username: username,\n                password: password,\n                password_confirmation: passwordConfirmation,\n                company_name: companyName,\n                address: address,\n                trade_type: tradeType,\n                point_of_contact: poc,\n                phone: phone,\n                email: email\n            }),\n        })  .then((r) => {\n                if (r.ok) {\n                    return r.json().then((respData) => {\n                        setSessionProjData(handleGetProjects())\n                        setSessionUserData(respData)\n                        setLoginStatus(true)\n                        navigate('/profile')        \n                    })\n                } else {\n                    return r.json().then((errorData) => {\n                        setCreateErrors(errorData)\n                        setLoginStatus(false)\n                    })\n                }\n                \n        })                   \n                setLoginErrors()\n                setUsername('')\n                setPassword('')\n                setPasswordConfirmation('')\n                setCompanyName('')\n                setAddress('')\n                setTradeType('')\n                setPoc('')\n                setPhone(0)\n                setEmail('')\n    }\n\n    const loginDisplay = () => {\n        if (sessionUserData === null && loginStatus === false) {\n            const showLoginError = loginErrors ? loginErrors.error : null\n            return (\n                <div>\n                    <><h5 className='make_red'>{showLoginError}</h5></>\n                    <form onSubmit={handleUserLogin}>\n                        <input\n                            type='text'\n                            name='username'\n                            placeholder='Username'\n                            value={username}\n                            onChange={(e) => setUsername(e.target.value)}\n                        />\n                        <ul></ul>\n                        <input\n                            type='password'\n                            name='password'\n                            placeholder='Password'\n                            value={password} \n                            onChange={(e) => setPassword(e.target.value)}\n                        />\n                        <ul></ul>\n                        <button type='submit'>Submit</button>\n                    </form>\n                </div>\n        )}\n    }\n\n    const createDisplay = () => {\n        const createError = createErrors ? createErrors.error : null\n        return (\n            <div>\n                <><h5 className='make_red'>{createError}</h5></>\n                <form onSubmit={handleUserCreate}>\n                    <h5><b>*All fields required</b></h5>\n                    <input\n                        type='text'\n                        name='username'\n                        placeholder='Username'\n                        value={username}\n                        onChange={(e) => setUsername(e.target.value)}\n                    />\n                    <ul></ul>\n                    <input\n                        type='password'\n                        name='password'\n                        placeholder='Password'\n                        value={password} \n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                    <ul></ul>\n                    <input\n                        type='password'\n                        name='password_confirmation'\n                        placeholder='Password Confirmation'\n                        value={passwordConfirmation} \n                        onChange={(e) => setPasswordConfirmation(e.target.value)}\n                    />\n                    <ul></ul>\n                    <input\n                        type='text'\n                        name='company_name'\n                        placeholder='Company Name'\n                        value={companyName} \n                        onChange={(e) => setCompanyName(e.target.value)}\n                    />\n                    <ul></ul>\n                    <input\n                        type='text'\n                        name='address'\n                        placeholder='Address'\n                        value={address} \n                        onChange={(e) => setAddress(e.target.value)}\n                    />\n                    <ul></ul>\n                    <input\n                        type='text'\n                        name='trade_type'\n                        placeholder='Trade Type'\n                        value={tradeType} \n                        onChange={(e) => setTradeType(e.target.value)}\n                    />\n                    <ul></ul>\n                    <input\n                        type='text'\n                        name='point_of_contact'\n                        placeholder='Point of Contact'\n                        value={poc} \n                        onChange={(e) => setPoc(e.target.value)}\n                    />\n                    <ul></ul>\n                    <input\n                        type='number'\n                        name='phone'\n                        placeholder='Phone Number'\n                        value={phone} \n                        onChange={(e) => setPhone(e.target.value)}\n                    />\n                    <ul></ul>\n                    <input\n                        type='text'\n                        name='email'\n                        placeholder='Email'\n                        value={email} \n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                    <ul></ul>\n                    <button type='submit'>Submit</button>\n                </form>\n            </div>\n        )\n    }\n\n    const logout = () => {\n        fetch('/logout', {\n            method: 'DELETE',\n        })\n            setSessionUserData(null)\n            setSessionProjData(null)\n            setLoginStatus(false)\n    }\n\n    const toggleButton = () => setLoginCreate(!loginCreate)\n\n    const execLogin = () => {\n        if (loginStatus === false) {\n            if (loginCreate === true) {\n                return (\n                    <>\n                        <h1>Login</h1>\n                        <button onClick={() => toggleButton()}>{loginCreate ? 'Signup' : 'Login'}</button>\n                        <br></br>\n                        {loginDisplay()}\n                    </>\n                )\n            } else {\n                return (\n                    <>\n                        <h1>Create Account</h1>\n                        <button onClick={() => toggleButton()}>{loginCreate ? 'Signup' : 'Login'}</button>\n                        <br></br>\n                        {createDisplay()}\n                    </>\n                )\n            }\n        } else {\n            return (\n                <>\n                    <h1>Logout</h1>\n                    <h4>Click to logout</h4>\n                    <button onClick={() => logout()}>Logout</button>\n                </>\n            )\n        }\n    }\n\n    return (\n        <div>\n            {execLogin()}\n        </div>\n    )\n}\n\nexport default Login","import React, { useState } from 'react'\n\nfunction EditForm ({item, handleCompleteItem, sessionUserData, setSessionUserData, setEditErrors, projectSelector, areaSelector, selectProject, selectArea, sessionProjData}) {\n\n    const [editItem, setEditItem] = useState(false)\n    const [updateTask, setUpdateTask] = useState('')\n    const [updateNotes, setUpdateNotes] = useState('')\n    const [updateCompleteBy, setUpdateCompleteBy] = useState()\n    const [titleFound, setTitleFound] = useState(false)\n\n    const handleUpdateItem = (e) => {\n        e.preventDefault();\n\n        fetch(`/punch_items/${item.id}`, {\n            method: 'PATCH',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                project_id: selectProject,\n                task: updateTask,\n                area: selectArea,\n                notes: updateNotes,\n                complete_by: updateCompleteBy\n            })  \n        })\n        .then((r) => {\n            if (r.ok) {\n                return r.json().then((respData) => {\n                    console.log(respData)\n                    item.project_id = respData.project_id ? respData.project_id : item.project_id\n                    item.task = respData.task ? respData.task : item.task\n                    item.area = respData.area ? respData.area : item.area\n                    item.notes = respData.notes ? respData.notes : item.notes\n                    item.complete_by = respData.complete_by ? respData.complete_by : item.complete_by\n                    setSessionUserData({ ...sessionUserData })\n                    setEditItem(false)\n                })\n            } else {\n                return r.json().then((errorData) => {\n                    setEditErrors(errorData)\n                })\n            }\n        })\n        setUpdateTask('')\n        setUpdateNotes('')\n        setUpdateCompleteBy()\n        setEditItem(false)        \n    }\n\n    const punchItemToProjectTitle = () => {\n        if (sessionProjData.length !== 0 && sessionProjData != undefined) {\n            return (sessionProjData.find(proj => proj.id === item.project_id)).title\n        }\n    }\n\n    const execForm = () => {\n    if (editItem === false && titleFound === false) {\n        return (\n            <tr key={item.id}>\n                <td>{item.task}</td>\n                <td>{punchItemToProjectTitle()}</td>\n                <td>{item.area}</td>\n                <td>{item.notes}</td>\n                <td>{item.complete_by}</td>\n                <td><input type='button' value='Complete' onClick={() => handleCompleteItem(item)}/></td>\n                <td><input type='button' value='Edit' onClick={() => setEditItem(true)}/></td>\n            </tr>\n        )\n    } else if (item !== null && editItem === true){\n            return ( \n            <tr key={item.id}>\n                    <td><input type='text' name='task' placeholder={item.task} value={updateTask} onChange={e => {setUpdateTask(e.target.value)}} /></td>\n                    <td>{projectSelector()}</td>\n                    <td>{areaSelector()}</td>\n                    <td><input type='text' name='notes' placeholder={item.notes} value={updateNotes} onChange={e => {setUpdateNotes(e.target.value)}} /></td>\n                    <td><input type='date' name='complete by' placeholder={item.complete_by} value={updateCompleteBy} onChange={e => {setUpdateCompleteBy(e.target.value)}} /></td>\n                    <td><input type='button' value='Save' onClick={e => handleUpdateItem(e)} /></td>\n            </tr>\n            )\n    }}\n\n    return (\n        execForm()\n    )\n}\n\nexport default EditForm","import React, {useState} from 'react'\nimport EditForm from './EditForm'\nimport './UserLists.css'\nimport './App.css'\nimport { useNavigate, Link } from 'react-router-dom'\n\nfunction UserLists({sessionUserData, setSessionUserData, loginStatus, sessionProjData, handleGetProjects}) {\n\n    console.log(sessionProjData)\n\n    const [createPunchItem, setCreatePunchItem] = useState(false)\n    const [itemTask, setItemTask] = useState('')\n    const [itemArea, setItemArea] = useState('')\n    const [itemNotes, setItemNotes] = useState('')\n    const [itemCompBy, setItemCompBy] = useState()\n    const [itemErrors, setItemErrors] = useState()\n    const [editErrors, setEditErrors] = useState()\n    const [selectProject, setSelectProject] = useState()\n    const [selectArea, setSelectArea] = useState()\n    const navigate = useNavigate()\n\n    const handleItemCreate = (e) => {\n        e.preventDefault();\n\n        fetch('/punch_items', {\n            method: 'POST',\n            headers: {\n                'Content-type': 'application/json',\n            },\n            body: JSON.stringify({\n                    project_id: selectProject,\n                    task: itemTask,\n                    area: selectArea,\n                    notes: itemNotes,\n                    complete_by: itemCompBy,\n                    active: true,\n                }),\n        })\n        .then((r) => {\n            if (r.ok) {\n                return r.json().then((respData) => {\n                    sessionUserData.punch_items.push(respData)\n                    setSessionUserData({ ...sessionUserData })\n                    setCreatePunchItem(false)\n                    handleGetProjects()\n                })\n            } else {\n                return r.json().then((errorData) => {\n                    setItemErrors(errorData)\n                })\n            }\n        })\n        setSelectProject(null)\n        setSelectArea(null)\n        setItemTask('')\n        setItemArea('')\n        setItemNotes('')\n        setItemCompBy('')\n    }\n    \n    const handleCompleteItem = (item) => {\n        fetch(`/punch_items/${item.id}`, {\n            method: 'DELETE',\n        })\n        for (let x = 0; x < sessionUserData.punch_items.length; x++) {\n            if (sessionUserData.punch_items[x].id === item.id) {\n                sessionUserData.punch_items.splice(x, 1)\n            }\n            setSessionUserData({ ...sessionUserData })\n        }\n    }\n\n    const listPunchItems = () => {\n         return sessionUserData.punch_items.map((item) => {\n            return (\n                <EditForm item={item} handleCompleteItem={handleCompleteItem} sessionUserData={sessionUserData} setSessionUserData={setSessionUserData} setEditErrors={setEditErrors} projectSelector={projectSelector} areaSelector={areaSelector} selectProject={selectProject} selectArea={selectArea} sessionProjData={sessionProjData}/>\n            )\n         })\n    }\n\n    const itemMessages = () => {\n        if (sessionUserData.punch_items.length === 0) {\n            return (<h5 style={{color: 'green'}}>There are currently no items to complete!</h5>)\n        }     \n    }\n\n    const projMessages = () => {\n        // debugger\n        if (sessionProjData.length === 0 || sessionProjData === undefined) {\n        return (<h5>Please add a <Link to={'/projects'}>Project</Link> to begin creating Punch Items</h5>)\n        }\n    }\n\n    const projectSelector = () => {\n        return (\n        <select name='project_selector' onChange={e => setSelectProject(e.target.value)}>\n            <option value={null}>Select Project</option>\n            {sessionProjData.map((project) => {\n                return (\n                    <option key={project.id} value={project.id}>{project.title}</option>\n                )\n            })}\n        </select>\n        )\n    }\n\n    // put in data file\n    const areas = [\n        {value: 'Offsite', label: 'Offsite'},\n        {value: 'Site', label: 'Site'},\n        {value: 'Building', label: 'Building'},\n        {value: 'Electrical', label: 'Electrical'},\n        {value: 'Plumbing', label: 'Plumbing'},\n        {value: 'HVAC', label: 'HVAC'},\n    ]\n\n    const areaSelector = () => {\n        return (\n            <select name='area-selector' onChange={e => setSelectArea(e.target.value)}>\n                <option value={null}>Select Area</option>\n                {areas.map((area) => {\n                    return (\n                        <option key={area.id} value={area.id}>{area.value}</option>\n                    )\n                })}\n            </select>\n        )\n    }\n    \n    const execProfile = () => {\n        if (loginStatus === false) {\n            return (\n                <h4>Unauthorized - please login</h4>\n            )\n        } else if (sessionUserData === null && loginStatus === true) {\n            return (\n                <h4>Loading...</h4>\n            )\n        } else if (sessionUserData !== null && loginStatus === true) {\n            if (sessionProjData === [] || sessionProjData === undefined) {\n                console.log(sessionProjData)\n                navigate('/projects')\n            }\n            else if (createPunchItem === false) {\n            return (\n                <div>\n                    <h1>Punch List</h1>\n                    <h4>Welcome, {sessionUserData.point_of_contact}!</h4>\n                            <div align='right'>\n                                <input type='button' value='Create Punch Item' onClick={() => {setCreatePunchItem(true); setItemErrors(null)}}/> \n                            </div>\n                        <div>\n                            <table align='center' className=''>\n                                <tr>\n                                    <th>Task</th>\n                                    <th>Project</th>\n                                    <th>Area</th>\n                                    <th>Notes</th>\n                                    <th>Complete by:</th>\n                                </tr>\n                                    {listPunchItems()}\n                            </table>\n                                {itemMessages()}\n                                {projMessages()}\n                        </div>\n                </div>\n            )} else {\n                const showEditErrors = editErrors ? editErrors.error : null\n                const showItemErrors = itemErrors ? itemErrors.error : null \n                return (\n                    <div>\n                        <h1>Add New Punch Item</h1>\n                        <div align='right'>\n                            <input type='button' value='Back to Punch List' onClick={() => {setCreatePunchItem(false); setEditErrors(null)}}/> \n                        </div>\n                        <h5><b>*All fields required</b></h5>\n                        <><h5 className='make_red'>{showItemErrors}</h5></>\n                        <><h5 className='Make_red'>{showEditErrors}</h5></>\n                        <form onSubmit={handleItemCreate}>\n                            {projectSelector()}\n                            <ul></ul>\n                            <input\n                                type='text'\n                                name='task'\n                                placeholder='Task'\n                                value={itemTask}\n                                onChange={(e) => setItemTask(e.target.value)}\n                            />\n                            <ul></ul>\n                            {areaSelector()}\n                            <ul></ul>\n                            <input\n                                type='text'\n                                name='notes'\n                                placeholder='Notes'\n                                value={itemNotes} \n                                onChange={(e) => setItemNotes(e.target.value)}\n                            />\n                            <ul></ul>\n                            <input\n                                type='date'\n                                name='complete by'\n                                placeholder='Complete By'\n                                value={itemCompBy} \n                                onChange={(e) => setItemCompBy(e.target.value)}\n                            />\n                            <ul></ul>\n                            <button type='submit'>Submit</button>\n                        </form>\n                    </div>\n                )}\n        }}\n\n    return (\n        <div>\n            {execProfile()}\n        </div>\n    )\n}\n\nexport default UserLists","import React, { useState } from 'react'\nimport './UserLists.css'\nimport './App.css'\n\nfunction ProjectLists({ sessionUserData, loginStatus, sessionProjData, setSessionProjData, projectErrors, setProjectErrors }) {\n\n    const [createProject, setCreateProject] = useState(false)\n    const [projTitle, setProjTitle] = useState('')\n    const [projAddress, setProjAddress] = useState('')\n    const [projOwnerName, setProjOwnerName] = useState('')\n    const [projCompBy, setProjCompBy] = useState(null)\n\n    const projectsList = () => {\n        if (sessionUserData === null) {\n            return (\n                <p>Please login</p>\n            )            \n        } else if (sessionProjData === null && loginStatus === true) {\n            return (\n                <p>Loading...</p>\n            )\n        } else if (sessionProjData !== null && loginStatus === true) {\n            return sessionProjData.map((project) => {\n                return (\n                    <tr key={project.address}>\n                        <td>{project.title}</td>\n                        <td>{project.address}</td>\n                        <td>{project.owner_name}</td>\n                        {project.users.map((user) => {\n                                return (\n                                    <tr key={Math.round(Math.random()*1000000)}>\n                                        <td>{user.company_name}</td>\n                                        <td>{user.trade_type}</td>\n                                        <td>{user.point_of_contact}</td>\n                                        <td>{user.phone}</td>\n                                    </tr>\n                        )})}\n                    </tr>\n                )\n            })\n        }\n    }\n\n    const projectsView = () => {\n            return (\n                <div>\n                    <h1>Project List</h1>\n                    <div align='right'>\n                        <input type='button' value='Create Project' onClick={() => setCreateProject(true)}/> \n                    </div>\n                    <br></br>      \n                    <div>\n                        <table align='center'>\n                            <tbody>\n                                <tr>\n                                    <th>Project Name</th>\n                                    <th>Address</th>\n                                    <th>Owner Info</th>\n                                    <th>Sub Name</th>\n                                </tr>\n                            {projectsList()}\n                            </tbody>\n                        </table>\n                        {projMessages()}\n                    </div>\n                </div>\n            )\n        }\n\n        const handleProjCreate = (e) => {\n            e.preventDefault()\n\n            fetch('/projects', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    title: projTitle,\n                    address: projAddress,\n                    owner_name: projOwnerName,\n                    complete_by: projCompBy,\n                })\n            })\n            .then((r) => {\n                if (r.ok) {\n                    return r.json().then((respData) => {\n                        setSessionProjData(respData)\n                        setCreateProject(false)\n                    })\n                } else {\n                    return r.json().then((errorData) => {\n                        setProjectErrors(errorData)\n                    })\n                }\n        })\n            setProjTitle('')\n            setProjAddress('')\n            setProjOwnerName('')\n            setProjCompBy()\n        }\n\n        const projMessages = () => {\n                if (sessionProjData.length === 0 || sessionProjData === undefined) {\n                return (<h5>Please Create Project to begin creating Punch Items</h5>)\n            }\n        }\n\n        const createProjectForm = () => {\n            const showProjectErrors = projectErrors ? projectErrors.error : null\n            return (\n                <div>\n                    <h1>Add New Project</h1>\n                    <div align='right'>\n                        <input type='button' value='Projects List' onClick={() => {setCreateProject(false); setProjectErrors(null)}}/> \n                    </div>\n                    <h5><b>*All fields required</b></h5>\n                    <><h5 className='make_red'>{showProjectErrors}</h5></>\n                    <form onSubmit={handleProjCreate}>\n                    <input\n                        type='text'\n                        name='title'\n                        placeholder='Title'\n                        value={projTitle}\n                        onChange={(e) => setProjTitle(e.target.value)}\n                    />\n                    <ul></ul>\n                    <input\n                        type='text'\n                        name='address'\n                        placeholder='Address'\n                        value={projAddress} \n                        onChange={(e) => setProjAddress(e.target.value)}\n                    />\n                    <ul></ul>\n                    <input\n                        type='text'\n                        name='owner_name'\n                        placeholder='Owner Name'\n                        value={projOwnerName} \n                        onChange={(e) => setProjOwnerName(e.target.value)}\n                    />\n                    <ul></ul>\n                    <input\n                        type='date'\n                        name='complete_by'\n                        placeholder='Complete By'\n                        value={projCompBy} \n                        onChange={(e) => setProjCompBy(e.target.value)}\n                    />\n                    <ul></ul>\n                    <button type='submit'>Submit</button>\n                </form>\n                </div>\n            )\n        }\n\n        const execProjects = () => {\n            if (loginStatus === true) {\n                 if (createProject === false) {\n                    return (\n                        <div>\n                            {projectsView()}\n                        </div>\n                    )\n                } else {\n                    return (\n                        <div>\n                            {createProjectForm()}\n                        </div>\n                    )\n                }\n            } else if (loginStatus === false) {\n                return (\n                    <div>\n                        <h4>Unauthorized - please login</h4>\n                    </div>\n                )\n            }\n        }\n\n        return (\n            <div>\n                {execProjects()}\n            </div>\n        )   \n}\n\nexport default ProjectLists","import React from 'react'\nimport {NavLink} from 'react-router-dom'\n\nfunction NavBar({ loginStatus }) {\n\n    return (\n        <div>\n            <br></br>\n            <b>\n                <NavLink style={{textDecoration: 'none'}}\n                    to='/'>\n                        Home &ensp;\n                </NavLink>\n                <NavLink style={{textDecoration: 'none'}}\n                    to='/profile'>\n                        Profile &ensp;\n                </NavLink>\n                <NavLink style={{textDecoration: 'none'}}\n                    to='/projects'>\n                        Projects &ensp;\n                </NavLink>\n                <NavLink style={{textDecoration: 'none'}}\n                    to='/login'>\n                        {loginStatus ? 'Logout' : 'Login'} &ensp;\n                </NavLink>\n            </b>\n        </div>\n    )\n}\n\nexport default NavBar","import React, {useEffect, useState} from 'react'\nimport './App.css';\nimport Home from './Home'\nimport Login from './Login'\nimport UserLists from './UserLists'\nimport ProjectLists from './ProjectLists'\nimport NavBar from './NavBar'\nimport {Routes, Route, useNavigate} from 'react-router-dom'\n\nfunction App() {\n\n  const [sessionUserData, setSessionUserData] = useState(null)\n  const [sessionProjData, setSessionProjData] = useState([])\n  const [loginStatus, setLoginStatus] = useState(false)\n  const [projectErrors, setProjectErrors] = useState()\n  const navigate = useNavigate()\n\n    useEffect(() => {\n      fetch('/me')\n      .then((r) => {\n        if (r.ok) {\n          return r.json().then((respData) => {\n            setSessionUserData(respData)\n            setLoginStatus(true)\n            handleGetProjects()  \n          })\n        } else {\n          return r.json().then((errorData) => {\n            setSessionUserData(null)\n            setLoginStatus(false)\n            navigate('/login')    \n          })\n        }\n    })\n  }, [])\n\n\n    const handleGetProjects = () => {\n          fetch('/projects')\n            .then((r) => {\n                if (r.ok) {\n                  return r.json().then((respData) => {\n                    setSessionProjData(respData)\n                  })\n                } else {\n                  return r.json().then((errorData) => {\n                    setProjectErrors(errorData)\n                    setSessionProjData([])\n                  })\n                }\n    })\n  }\n\n  const execApp = () => {\n    return (\n      <div className='App'>\n        <header>\n          Welcome to Builder Exchange\n        </header>\n          <div>\n              <NavBar loginStatus={loginStatus} />\n                <Routes>\n                  <Route path='/' element={<Home />} />\n                  <Route path='/profile' element={<UserLists sessionUserData={sessionUserData} setSessionUserData={setSessionUserData} loginStatus={loginStatus} sessionProjData={sessionProjData} handleGetProjects={handleGetProjects}/>} />\n                  <Route path='/projects' element={<ProjectLists sessionUserData={sessionUserData} setSessionUserData={setSessionUserData} loginStatus={loginStatus} sessionProjData={sessionProjData} setSessionProjData={setSessionProjData} projectErrors={projectErrors} setProjectErrors={setProjectErrors}/>} />\n                  <Route path='/login' element={<Login sessionUserData={sessionUserData} setSessionUserData={setSessionUserData} loginStatus={loginStatus} setLoginStatus={setLoginStatus} sessionProjData={sessionProjData} setSessionProjData={setSessionProjData} handleGetProjects={handleGetProjects}/>} />\n                </Routes>\n          </div>\n      </div>\n    )\n  }\n\n    return (\n      <div>\n        {execApp()}\n      </div>)\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()"],"sourceRoot":""}